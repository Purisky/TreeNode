using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using TreeNodeSourceGenerator;
namespace TreeNodeSourceGenerator
{
    public partial class NodeAccessorSourceGenerator
    { 

        private string GenerateAccessorClass(INamedTypeSymbol nodeType)
        {
            var className = $"{nodeType.Name}Accessor";
            var fullTypeName = nodeType.ToDisplayString();
            
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using TreeNode.Runtime;");
            sb.AppendLine();
            sb.AppendLine("namespace TreeNode.Runtime.Generated");
            sb.AppendLine("{");
            sb.AppendLine($"    public sealed class {className} : INodeAccessor");
            sb.AppendLine("    {");
            sb.AppendLine($"        private static readonly Type NodeType = typeof({fullTypeName});");
            sb.AppendLine();
            sb.AppendLine("        public void CollectChildren(JsonNode node, List<JsonNode> children) { }");
            sb.AppendLine("        public void CollectChildrenWithMetadata(JsonNode node, List<(JsonNode, string, int)> children) { }");
            sb.AppendLine("        public int GetRenderOrder(string memberName) => 1000;");
            sb.AppendLine("        public Type GetNodeType() => NodeType;");
            sb.AppendLine("        public void CollectChildrenToBuffer(JsonNode node, JsonNode[] buffer, out int count) { count = 0; }");
            sb.AppendLine("        public bool HasChildren(JsonNode node) => false;");
            sb.AppendLine("        public int GetChildCount(JsonNode node) => 0;");
            sb.AppendLine("    }");
            sb.AppendLine("}");
            
            return sb.ToString();
        }

        private string GenerateRegistrarClass(List<INamedTypeSymbol> nodeTypes)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("using System;");
            sb.AppendLine("using TreeNode.Runtime.Generated;");
            sb.AppendLine();
            sb.AppendLine("namespace TreeNode.Runtime.Generated");
            sb.AppendLine("{");
            sb.AppendLine("    public static class GeneratedAccessorRegistrar");
            sb.AppendLine("    {");
            sb.AppendLine("        public static void RegisterAll(INodeAccessorProvider provider)");
            sb.AppendLine("        {");
            sb.AppendLine("            if (provider == null) return;");
            
            foreach (var nodeType in nodeTypes)
            {
                var fullTypeName = nodeType.ToDisplayString();
                var accessorClassName = $"{nodeType.Name}Accessor";
                sb.AppendLine($"            provider.RegisterAccessor(typeof({fullTypeName}), new {accessorClassName}());");
            }
            
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");
            
            return sb.ToString();
        }

    }
}